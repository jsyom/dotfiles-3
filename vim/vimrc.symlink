set nocompatible
filetype off

" PLUGINS {{{
call plug#begin('~/.vim/plugs')

" Color and Syntax
Plug 'chriskempson/base16-vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'moll/vim-node'
Plug 'elzr/vim-json'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'heavenshell/vim-jsdoc', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'mattn/emmet-vim'
Plug 'hail2u/vim-css3-syntax' " CSS3 syntax support
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' } " SCSS syntax highlighting
" Plug 'flazz/vim-colorschemes'
" Plug 'dracula/vim', { 'as': 'dracula' }
" Plug 'joshdick/onedark.vim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'godlygeek/tabular' " Align by symbols and shit
Plug 'editorconfig/editorconfig-vim'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parens, quotes in pair
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " Undo history visualizer
" Plug 'sjl/gundo.vim'
" GIT
Plug 'tpope/vim-fugitive' " Git wrapper
Plug 'airblade/vim-gitgutter' " Shows a git diff in the gutter
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tomtom/tcomment_vim'
Plug 'christoomey/vim-tmux-navigator' " Seamless navigation between tmux panes and vim splits
Plug 'skywind3000/asyncrun.vim'
Plug 'Yggdroot/indentLine'

call plug#end()
" }}}

if has('autocmd')
  filetype plugin indent on
endif

" Settings
set path+=**
set clipboard^=unnamedplus,unnamed
set cursorline
set nobackup
set nowb
set noswapfile
set number
set relativenumber
set ignorecase
set smartcase
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set tabstop=2
set softtabstop=4
set expandtab
set shiftwidth=2
set shiftround
set smarttab
set scrolloff=7                 " keep 4 lines off the edges of the screen when scrolling
set showmatch
set mat=2 " How many tenths of a second to blink when matching brackets
set hlsearch
set incsearch
set autoread
set autoindent                  " always set autoindenting on
set copyindent                  " copy the previous indentation on autoindenting
set mouse=a
set ttyfast
set timeout timeoutlen=1000 ttimeoutlen=50
set hidden
set history=1000
set list
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set encoding=utf8
set lazyredraw
set switchbuf=useopen,usetab,newtab
try
  set undodir=~/.vim/temp_dirs/undodir
  set undofile
catch
endtry
set matchpairs+=<:> " can tab around brackets
let g:html_indent_tags = 'li\|p'
set whichwrap+=<,>,h,l
set ffs=unix,dos,mac " Use Unix as the standard file type
set wildmenu
set nomodeline
set title
set noshowmode
set laststatus=2
" No annoying sound on errors
set noerrorbells
set novisualbell
set noeb vb t_vb=
set t_vb=
set tm=500

" Vim Color And Syntax {{{
syntax on
if has('syntax')
  syntax enable
endif
if (empty($TMUX))
  if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif
" let g:onedark_termcolors=256
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
" colorscheme base16-chalk
" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif
" }}}

" CUSTOM MAPPINGS
" Map Leader to space
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"
inoremap jk <ESC>`^
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap ; :
nmap <leader>w :w!<cr>
" turn off highlight
map <silent> <leader><cr> :noh<cr>
nnoremap / /\v
vnoremap / /\v
" Edit vimrc
map <leader>e :e! ~/.vimrc<cr>
" Indent/Unindent
noremap > >>
noremap < <<
vnoremap > >gv
vnoremap < <gv

" Make Y move like D and C
noremap Y y$
" To the leftmost non-blank character of the current line
map H g^
" To the rightmost character of the current line
map L g$
" Quick quit
map <leader>qq :q<cr>
" Quick file reload
map <leader>r :e<cr>
" Switch between the last two files
nnoremap <leader><leader> <C-^>
" Quickly select text you just pasted
nnoremap gV `[v`]
nnoremap <Tab> %
vnoremap <Tab> %


" Plugins

" FZF {{{
let g:fzf_layout = { 'down': '40%' }
" Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Search project files, respecting git ignore
nnoremap <silent> <C-f> :FZF<CR>
" Search all files, e.g. node_modules/
nnoremap <silent> <leader>af :call fzf#vim#files('',
      \ {'source': 'ag --hidden --ignore .git -f -g "" -u', 'down': '40%'})<CR>
" Search MRU buffers
nnoremap <silent> <leader>f :Buffers<CR>
nnoremap <silent> <leader>` :Marks<CR>
nnoremap <space>g :GitFiles<CR>
nnoremap <space>c :Commits<CR>
" [Tags] Command to generate tags file
" let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=test'
nnoremap <silent> <leader>l :Lines<CR>
nnoremap <silent> <leader>t :Tags<CR>
nnoremap <silent> <leader>b :BTags<CR>
" }}}


""""""""""""""""""""""""""""""
" vim-jsdoc
""""""""""""""""""""""""""""""
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1
let g:jsdoc_underscore_private=1
let g:jsdoc_enable_es6=1

let g:vim_json_syntax_conceal = 0
let g:toggle_json_conceal=0
let g:javascript_plugin_jsdoc = 1 " Enables syntax highlighting for JSDocs.
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:javascript_enable_domhtmlcss = 1 " html tags in js and jsx files?

let g:NERDTreeWinPos = "left"
let g:NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeChDirMode                   = 2
map <silent> <C-e> :NERDTreeToggle<CR>

" Tabular
" Align on equal sign
vnoremap <silent> <Leader>cee :Tabularize /=<CR> 
" Align on # sign (comment)
vnoremap <silent> <Leader>cet    :Tabularize /#<CR>   
" Align (no sign)
vnoremap <silent> <Leader>ce     :Tabularize /

" Netrw
" absolute width of netrw window
let g:netrw_winsize = -28
" tree-view
let g:netrw_liststyle = 3
" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'
" open file in a new tab
let g:netrw_browse_split = 3

" let g:user_emmet_leader_key='<C-L>'
imap <C-L> <plug>(emmet-expand-abbr)
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}

" vim-fugitive {{{
""""""""""""""""""""""""""""""
map <leader>gg :GitGutterToggle<CR>
map <leader>gs :Gstatus<CR>
set diffopt+=vertical
" }}}

""""""""""""""""""""""""""""""
" undotree
""""""""""""""""""""""""""""""
map <leader>u :UndotreeToggle<CR>
let g:undotree_WindowLayout = 3
let g:undotree_SplitWidth = 35
let g:undotree_SetFocusWhenToggle = 1

" ALE {{{
let g:ale_sign_error = 'ㄨ' " error sign
let g:ale_sign_warning = '>>' " warning sign
let g:ale_set_highlights = 0
let g:ale_lint_on_enter = 1 " 0 disables linting on enter
let g:ale_set_signs = 1
let g:ale_lint_on_save = 1 " lint on save instead
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_quickfix = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'jsx': ['eslint'],
\   'typescript': ['tslint', 'tsserver', 'typecheck'],
\}

let g:ale_fixers = {'javascript.jsx': ['prettier'], 'typescript': ['prettier'], 'javascript': ['prettier'], 'typescript.tsx': ['prettier']}
let g:ale_fix_on_save = 0
nmap <Leader>pf <Plug>(ale_fix)
let g:ale_javascript_prettier_options = '--single-quote --print-width 80 --trailing-comma all'
" }}}

" NOTES {{{
let g:notes_folder = '~/Notes/'
" Project specific notes
let g:notes = g:notes_folder . 'Projects/' . fnamemodify(getcwd(), ':t') . '.md'
let g:note_size = 15
" Open current project notes
map <silent> <leader>n :execute ':topleft split ' . g:notes<cr>:execute ':resize' . g:note_size<cr>
" Open daily notes
let g:daily_notes = g:notes_folder . 'Daily/daily-notes.org'
map <silent> <leader>nn :execute ':topleft split ' . g:daily_notes<cr>:execute ':resize' . g:note_size<cr>
" }}}

""""""""""""
" indentLine
""""""""""""
" let g:indentLine_color_gui = '#65737E'

" Automatically recognize filetypes by extension
autocmd BufRead,BufNewFile .{babel,eslint,stylelint}rc set filetype=json

augroup FiletypeGroup
    autocmd!
    au BufNewFile, BufRead *.ts set filetype=typescript
    au BufRead,BufNewFile *.ts		setlocal filetype=typescript
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
    au BufNewFile, BufRead *.jsx set filetype=javascript.jsx
    au BufNewFile, BufRead *.js set filetype=javascript
augroup END

" Strip trailing spaces
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

" Strip trailing spaces on save
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
