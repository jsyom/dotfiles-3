" Allow vim to break compatibility with vi
set nocompatible

" Map Leader to space
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

" if (empty($TMUX))
"   if (has("nvim"))
"   "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"   "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
"   " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif

if (has("termguicolors"))
  set termguicolors
endif

let g:ale_emit_conflict_warnings = 0

""""""""""""""""""""""""""""""""""""""""""""""""""
" => LOAD PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vim/plugins.vim

""""""""""""""""""""""""""""""""""""""""""""""""""
" => BASIC SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""
set clipboard=unnamed " allow copy to system clipboard for copy paste
set number " Show current line number
set relativenumber " Show relative line numbers
set cursorline " Highlight cursor current line
set history=700 " Set how many lines of history VIM has to remember
set backspace=2
set showcmd " display incomplete commands
set autowrite " Automatically :write before running commmands
" Trigger autoread when changing buffers or coming back to vim in terminal.
au FocusGained,BufEnter * :silent! !

" Enable filetype plugins
" filetype plugin indent on
filetype plugin on
filetype indent on
set autoread " set to auto read when a file is changed from the outside

" Fast editing of vimrc
map <leader>e :e! ~/.vimrc<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""
" => COLORS AND FONTS
""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable
set background=dark

" Theme, Colorscheme, & Font
if has("gui_running")
  colorscheme Tomorrow-Night
  set guifont=Monaco:h14
  set linespace=2
  set noantialias
else
  try
    colorscheme OceanicNext
    " colorscheme jellybeans
  catch
  endtry
endif

function! ReverseBackground()
  if &background=="light"
    set background=dark
    colorscheme OceanicNext
    " colorscheme jellybeans
  else
    set background=light
    colorscheme solarized
    execute 'AirlineTheme solarized'
  endif
endfunction
command! Invbg call ReverseBackground()

" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=T
  set guioptions-=e
  set t_Co=256
  set guitablabel=%M\ %t
endif

set encoding=utf8 " Set utf8 as standard encoding and en_US as the standard language
set ffs=unix,dos,mac " Use Unix as the standard file type

""""""""""""""""""""""""""""""""""""""""""""""""""
" => USER INTERFACE
""""""""""""""""""""""""""""""""""""""""""""""""""
"HTML Editing
" set matchpairs+=<:>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" set path+=**
set path=$PWD/**

" Turn on the Wild menu
set wildmenu
set wildmode=list:longest,full

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
" set wildignore+=*.DS_STORE,*.db,node_modules/**,*.jpg,*.png,*.gif
if has("win16") || has("win32")
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
  set wildignore+=.git\*,.hg\*,.svn\*
endif

set ruler "Always show current position
set cmdheight=2 " Height of the command bar
set hid " A buffer becomes hidden when it is abandoned

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set ttyfast
  set mouse=a
endif

set ignorecase " Ignore case when searching
set smartcase " When searching try to be smart about cases
set hlsearch " Highlight search results
set incsearch " Makes search act like search in modern browsers
set lazyredraw " Don't redraw while executing macros (good performance config)
set magic " For regular expressions turn magic on
set showmatch " Show matching brackets when text indicator is over them
set mat=2 " How many tenths of a second to blink when matching brackets

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set up code folding
set foldmethod=indent
set foldnestmax=20
" set foldlevelstart=20
set nofoldenable

" Disable scrollbars (real hackers don't use scrollbars for navigation!)
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

" Set highlight cursor line
hi CursorLine cterm=none ctermbg=8 ctermfg=none

" Style verticle split seporator
hi VertSplit cterm=none ctermbg=none ctermfg=23

" Change selected text bg color
hi Visual cterm=none ctermbg=11 ctermfg=none

" Set folded highlight color
hi Folded ctermbg=10 ctermfg=10

""""""""""""""""""""""""""""""""""""""""""""""""""
" => FILES, BACKUPS, AND UNDO
""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn backup off
set nobackup
set nowb
set noswapfile

" Turn on presistent undo
" means that you can undo even when you close a buffer/Vim
try
  set undodir=~/.vim/temp_dirs/undodir
  set undofile
catch
endtry


""""""""""""""""""""""""""""""""""""""""""""""""""
" => TEXT, TAB, AND INDENT RELATED
""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Number of spaces to use for indent and unindent
set shiftwidth=2
" Visible width of tabs
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500
autocmd BufRead,BufNewFile *.md setlocal textwidth=80

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Strip trailing spaces on save
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Automatically recognize filetypes by extension
autocmd BufRead,BufNewFile .{babel,eslint,stylelint}rc set filetype=json

"Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>
"Below is to fix issues with the ABOVE mappings in quickfix window
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" => VISUAL MODE RELATED
""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
" => MOVING AROUND
""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them).
" Store relative line number jumps in the jumplist.
" noremap <expr> j v:count > 1 ? 'm`' . v:count . 'j' : 'gj'
" noremap <expr> k v:count > 1 ? 'm`' . v:count . 'k' : 'gk'
nnoremap j gj
nnoremap k gk

" Use gj gk to go quicker
" noremap gj 5gj
" noremap gk 5gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

if has('nvim')
  " Hack to get <C-h> working in neovim
  nnoremap <BS> <C-W>h

  " Exit terminal input mode
  " tnoremap <Esc> <C-\><C-n>

  " Easy navigation from terminal
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif


" Map Alt-[h,j,k,l] for resizing a window split
nnoremap <silent> <M-h> :vertical resize -2<CR>
nnoremap <silent> <M-j> :resize -2<CR>
nnoremap <silent> <M-k> :resize +2<CR>
nnoremap <silent> <M-l> :vertical resize +2<CR>

" Close the current buffer
" map <leader>bd :Bclose<cr>

" Close all the buffers
" map <leader>ba :1,1000 bd!<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
" Remember info about open buffers on close
set viminfo^=%

""""""""""""""""""""""""""""""""""""""""""""""""""
" => STATUS LINE
""""""""""""""""""""""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Hide tabline
set showtabline=1

""""""""""""""""""""""""""""""""""""""""""""""""""
" => SPELLING CHECK
""""""""""""""""""""""""""""""""""""""""""""""""""

hi SpellBad cterm=underline,bold ctermfg=red gui=underline,bold guifg=red
" Toggle and untoggle spell checking
map <leader>sc :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""""""""""""""""""""""
" => MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""

" Exit insert mode with `jk`
inoremap jk <ESC>`^
nnoremap ; :

" Fast saving
nmap <leader>w :w!<cr>

" Copy/Paste to clipboard
vmap <leader>y "+y
vmap <leader>d "+d
map <leader>p "+p
map <leader>P "+P

" Indent/Unindent
noremap > >>
noremap < <<
vnoremap > >gv
vnoremap < <gv

" To the leftmost non-blank character of the current line
map H g^
" To the rightmost character of the current line
map L g$

" Trim WhiteSpace
nnoremap <Leader>tws :%s/\s\+$//e<CR>

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Set Syntax
map <leader>sy :set syntax=

" Quick quit
map <leader>qq :q<cr>

" Quick file reload
map <leader>r :e<cr>

" Quick Open Notes
" Directory to notes folder
let g:notes_folder = '~/Desktop/Notes/'
" Project specific notes
let g:notes = g:notes_folder . 'Projects/' . fnamemodify(getcwd(), ':t') . '.md'
let g:note_size = 15
" Open current project notes
map <silent> <leader>n :execute ':topleft split ' . g:notes<cr>:execute ':resize' . g:note_size<cr>
" Open daily notes
let g:daily_notes = g:notes_folder . 'Daily/daily-notes.org'
map <silent> <leader>nn :execute ':topleft split ' . g:daily_notes<cr>:execute ':resize' . g:note_size<cr>

" Toggle quotes for json file
map <leader>" :call ConcealJsonToggle()<cr>
let g:toggle_json_conceal=0

" List contents of most used registers
nnoremap <silent> "" :registers "0123456789abcdefghijklmnopqrstuvwxyz*+.<CR>

" Paste in visual mode without updating default register
vnoremap p "_c<Esc>p

" Quick macro invocation with q register
nnoremap Q @q

" Switch between the last two files
nnoremap <leader><leader> <C-^>

" Math macro, do math on current line
nnoremap <leader>= 0v$hyA = <C-r>=<C-r>"<CR><Esc>

" Quickly select text you just pasted
nnoremap gV `[v`]

" Quickly edit your macros
" Usage <leader>m or "q<leader>m
nnoremap <leader>m  :<c-u><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>

" Use very magic
" Everything is special unless escaped
" nnoremap / /\v
" vnoremap / /\v

" Saner behavior of n and N
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Search current word without moving cursor
nnoremap <silent> K :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>

" Easily jump between brackets
" map <S-Tab> %
nnoremap <tab> %
vnoremap <tab> %

" cursor toggler
if !has('nvim')
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"

  " cursor toggle for tmux?
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif


nnoremap <expr> <UP> len(getline(line('.')-1)) > 0 ? '{+' : '{-'
nnoremap <expr> <DOWN> len(getline(line('.')+1)) > 0 ? '}-' : '}+'

" Read selected text
" TODO: escape single quote (') characters
" xnoremap <silent> <leader>s y:call jobstart('say -v Samantha -r 300 <C-r>"')<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
" => HELPER FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  endif
  return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction


" Toggle quotes for json file
function! ConcealJsonToggle()
  if g:toggle_json_conceal
    set conceallevel=2
    let g:toggle_json_conceal=0
  else
    set conceallevel=0
    let g:toggle_json_conceal=1
  endif
endfunction


" Strip trailing spaces
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun


" Tab completion
 " will insert tab at beginning of line,
 " will use completion if not at beginning
 " set wildmode=list:longest,list:full
 " set wildmode=list:longest,list
 function! InsertTabWrapper()
     let col = col('.') - 1
     if !col || getline('.')[col - 1] !~ '\k'
         return "\<tab>"
     else
         return "\<c-p>"
     endif
 endfunction
 inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
 inoremap <S-Tab> <c-n>


" Abbreviations - fix common typos
iabbrev funcoitn function
iabbrev functoin function
iabbrev funcotin function
iabbrev retrun return
iabbrev deafult default
iabbrev defult default
iabbrev sumbit submit
iabbrev submut submit
iabbrev consructor constructor
iabbrev constuctor constructor
iabbrev consuctor constructor

" NERDTrees File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('html', 202, 'none', '#FC4709')
call NERDTreeHighlightFile('hbs', 202, 'none', '#FC4709')
call NERDTreeHighlightFile('jade', 149, 'none', '#A0D24D')
call NERDTreeHighlightFile('json', 223, 'none', '#FECEA0')
call NERDTreeHighlightFile('scss', 44, 'none', '#1AD0CE')
call NERDTreeHighlightFile('css', 44, 'none', '#1AD0CE')
call NERDTreeHighlightFile('js', 226, 'none', '#FFFF0D')
call NERDTreeHighlightFile('rb', 197, 'none', '#E53378')
call NERDTreeHighlightFile('md', 208, 'none', '#FD720A')
call NERDTreeHighlightFile('php', 140, 'none', '#9E6FCD')
call NERDTreeHighlightFile('svg', 178, 'none', '#CDA109')
call NERDTreeHighlightFile('gif', 36, 'none', '#15A274')
call NERDTreeHighlightFile('jpg', 36, 'none', '#15A274')
call NERDTreeHighlightFile('png', 36, 'none', '#15A274')
